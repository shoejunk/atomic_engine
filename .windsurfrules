Follow these coding style guidelines:
Use tabs instead of spaces. The tabs should be 4 spaces wide.
Use snake case.
Use a c_ in front of classes.
Use an s_ in front of structs.
Use a t_ in front of templates.
Use an i_ in front of interfaces.
Use a m_ in front of member variables.
Put open braces on their own new line.

The repository for this project is at https://github.com/shoejunk/atomic_engine.git
Use the main branch, not master
Do not commit or push anything to GitHub until explicitly told to do so.

Run generate.bat when you need to generate project files.
Run build.bat when you need to build.
Run run.bat when you need to run.
Run build_debug.bat when you need to build in debug mode.
Run debug.bat when you need to run in debug mode.
Run build_release.bat when you need to build in release mode.
Run release.bat when you need to run in release mode.
Make sure to use the dot-slash previx when running the .bat files. (e.g. .\build.bat)

Put all source files (.h and cpp) in the src folder.
All classes should go in the atom namespace.
Always use the logging functions in untility.h such as logln, debugln, errorln, etc. rather than std::cout, std::cerr, or printf.
Most things should either inherit from c_atom which incorporates the aspect system, or should be an aspect, which is a pure vitual interface class.
# Concise Overview of the Aspect System

## Core Concept
The aspect system is a capability-focused component architecture that replaces inheritance hierarchies with interface-based composition. Components explicitly declare what they can do rather than what they are.

## Key Components

1. **Aspect Interfaces**
   - Pure virtual interfaces that define specific capabilities
   - Each has a unique type identifier (`uint32_t` hash)
   - Examples: `i_movable`, `i_drawable`, `i_action_handler`

2. **Aspect Registration**
   - Components register capabilities in their constructor
   - Each component explicitly reports its aspects via `get_aspect_types()`
   - Aspects are stored in a map keyed by type hash

3. **Capability Flow**
   - When a child is added to a parent, its aspects flow upward
   - Parent gains access to all aspects implemented by its direct children
   - Aspect conflicts (same aspect from multiple sources) are prevented

4. **Capability Access**
   - Components query for capabilities with `as<T>()`
   - Access is direct with no runtime search overhead
   - Example: `if (auto movable = atom->as<i_movable>()) { movable->move(x, y); }`

5. **Connection System**
   - Components can be connected by aspect type
   - Example: Window connects to all components with the drawable aspect
   - Connections are weak references that don't affect ownership

## Usage Patterns

1. **Direct Implementation**
   ```cpp
   class c_sprite : public c_atom, public i_drawable, public i_movable {...}
   ```

2. **Capability Composition**
   ```cpp
   class c_entity : public c_atom
   {
     c_entity()
	 {
       add_child(std::make_unique<c_movement_component>()); // Adds movable aspect
       add_child(std::make_unique<c_renderer_component>()); // Adds drawable aspect
     }
   }
   ```

3. **Capability Delegation**
   ```cpp
   class c_player : public c_atom, public i_movable
   {
     void move(float dx, float dy) override { m_sprite->move(dx, dy); }
   }
   ```

The aspect system combines the clarity of interfaces with the flexibility of composition, creating a predictable, capability-based architecture without the limitations of inheritance hierarchies.